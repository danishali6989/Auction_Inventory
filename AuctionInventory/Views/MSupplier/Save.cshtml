@using AuctionInventory.Services;
@using AuctionInventoryDAL.Repositories;
@model AuctionInventory.Models.Supplier


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    //List<SelectListItem> category = categoryServiceClient.CategoryDropDown();
    //ViewBag.category = categoryServiceClient.GetAllCategory().Select(x => new SelectListItem { Text = x.strCategoryName, Value = x.iCategoryID.ToString() });
    //ViewBag.category = categoryServiceClient.GetAllCategory();

    //AuctionInventory.Services.CategoryServiceClient categoryServiceClient = new AuctionInventory.Services.CategoryServiceClient();
    //ViewBag.category = categoryServiceClient.CategoryDropDown();


    //CategoryRepository categoryRepository = new CategoryRepository();
    //ViewBag.category = categoryRepository.GetAll();

    //SelectList CategoryList = (SelectList)ViewBag.category;
    
}
<style type="text/css">
    body {
        font-family: Arial;
        font-size: 10pt;
    }

    .error {
        color: red;
    }
</style>

<h2>Save</h2>
@using (Html.BeginForm("Save", "MSupplier", FormMethod.Post, new { id = "popupForm" }))
{
    @Html.AntiForgeryToken()
    if (Model != null && Model.iSupplierID > 0)
    {
        @Html.HiddenFor(a => a.iSupplierID)
    }
    <div class="form-group">
      
        <label>First Name</label>
         @Html.TextBoxFor(a => a.strFirstName, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.strFirstName, "", new { @class = "error" })
    </div>
    <div class="form-group">
        <label>Middle Name</label>
        @Html.TextBoxFor(a => a.strMiddleName, new { @class = "form-control" })
         @Html.ValidationMessageFor(a => a.strMiddleName, "", new { @class = "error" })
    </div>
    <div class="form-group">
        <label>Last Name</label>
        @Html.TextBoxFor(a => a.strLastName, new { @class = "form-control" })
        @Html.ValidationMessageFor(a => a.strLastName, "", new { @class = "error" })

    </div>
    <div class="form-group">
        <label>Supplier Category</label>
       @*@Html.DropDownList("category", (List<SelectListItem>)ViewBag.category, new { @class = "form-control", @id = "ddliSupplierCategory" })*@




        @*@Html.DropDownListFor(m => m.iSupplierCategory, (SelectList)ViewBag.category, "Select Category", new { @class = "form-control" })*@





        @Html.DropDownListFor(m => m.iSupplierCategory, (IEnumerable<SelectListItem>)ViewBag.category, "Select Category", new { @class = "form-control" })




        @*@Html.DropDownList("iSupplierCategory", (List<SelectListItem>)ViewBag.category, "Select a Category", new { @class = "form-control" })*@

        @*@Html.DropDownListFor(a => a.iSupplierCategory, CategoryList, "Select Category", new { @class = "form-control", @id = "ddliSupplierCategory" })*@


        @*@Html.DropDownList("category", (List<SelectListItem>)ViewBag.category, new { @class = "form-control", @id = "ddliSupplierCategory" })*@
        @*@Html.DropDownList("iCategoryID", ViewBag.category as List<SelectListItem>)*@

        @*@Html.DropDownListFor(m => m.iCategoryID , new SelectList(ViewBag.category, "iSupplierCategory", "iSupplierCategory"), "Select Categort")*@

        @*@Html.DropDownList("iCategoryID", (List<SelectListItem>)ViewBag.category, new { @class = "form-control", @id = "iCategoryID" })*@
        @*@Html.TextBoxFor(a => a.iSupplierCategory, new { @class = "form-control" })*@
        @*@Html.ValidationMessageFor(a => a.strSupplierCategory)*@
    </div>
    @*<div class="form-group">
        <label>Supplier ServiceType </label>
        @Html.TextBoxFor(a => a.iSupplierServiceType, new { @class = "form-control" })
       
    </div>*@
    <div class="form-group">
        <label>Email ID</label>
        @Html.TextBoxFor(a => a.strEmailID, new { @class = "form-control" })
        @Html.ValidationMessageFor(a => a.strEmailID, "", new { @class = "error" })
        
    </div>

    <div class="form-group">
        <label>Phone Number</label>
        @Html.TextBoxFor(a => a.iPhoneNumber, new { @class = "form-control" })
        @Html.ValidationMessageFor(a => a.iPhoneNumber, "", new { @class = "error" })


    </div>
    <div class="form-group">
        <label>Address</label>
        @Html.TextBoxFor(a => a.strAddress, new { @class = "form-control" })
        @Html.ValidationMessageFor(a => a.strAddress, "", new { @class = "error" })
    </div>
    <div class="form-group">
        <label>Pincode</label>
        @Html.TextBoxFor(a => a.iPincode, new { @class = "form-control", @type = "number" })

    </div>
    <div class="form-group">
        <label>Currency</label>
        @Html.DropDownListFor(m => m.iCurrency, (IEnumerable<SelectListItem>)ViewBag.currency, "Select Currency", new { @class = "form-control" })


    </div>
    @*<div class="form-group">
            <label>Supplier Photo</label>
            @Html.TextBoxFor(a => a.SupplierPhoto, new { @class = "form-control" })
            @Html.ValidationMessageFor(a => a.SupplierPhoto)
        </div>*@
    <div class="form-group">
        <label>Supplier Date</label>
        @Html.TextBoxFor(a => a.SupplierDate, new { @class = "form-control datepicker" })
        @Html.ValidationMessageFor(a => a.SupplierDate, "", new { @class = "error" })

    </div>

    <div>
        <input type="submit" value="Save" />
    </div>
}

<script type="text/javascript">
    $(function () { // will trigger when the document is ready
        $('.datepicker').datepicker(); //Initialise any date pickers
    });

</script>